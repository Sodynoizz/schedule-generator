[{"D:\\wtf\\schedule-generator\\src\\@types\\index.ts":"1","D:\\wtf\\schedule-generator\\src\\components\\Background\\colorful.tsx":"2","D:\\wtf\\schedule-generator\\src\\components\\Background\\Decorations\\index.tsx":"3","D:\\wtf\\schedule-generator\\src\\components\\Background\\flower.tsx":"4","D:\\wtf\\schedule-generator\\src\\components\\Background\\halloween.tsx":"5","D:\\wtf\\schedule-generator\\src\\components\\Background\\index.tsx":"6","D:\\wtf\\schedule-generator\\src\\components\\Background\\Mistletoe.tsx":"7","D:\\wtf\\schedule-generator\\src\\components\\Background\\Ordaments.tsx":"8","D:\\wtf\\schedule-generator\\src\\components\\Background\\sticker.tsx":"9","D:\\wtf\\schedule-generator\\src\\components\\Background\\sweetintherain.tsx":"10","D:\\wtf\\schedule-generator\\src\\components\\ColorPicker.tsx":"11","D:\\wtf\\schedule-generator\\src\\components\\ExamSchedule\\Components\\DownloadButton.tsx":"12","D:\\wtf\\schedule-generator\\src\\components\\ExamSchedule\\Components\\Preview.tsx":"13","D:\\wtf\\schedule-generator\\src\\components\\ExamSchedule\\Components\\ScreenSize.tsx":"14","D:\\wtf\\schedule-generator\\src\\components\\ExamSchedule\\Components\\ThemeButton.tsx":"15","D:\\wtf\\schedule-generator\\src\\components\\ExamSchedule\\Page.tsx":"16","D:\\wtf\\schedule-generator\\src\\components\\index.tsx":"17","D:\\wtf\\schedule-generator\\src\\components\\Input.tsx":"18","D:\\wtf\\schedule-generator\\src\\components\\LearnSchedule\\Page.tsx":"19","D:\\wtf\\schedule-generator\\src\\components\\Loader\\Ellipsis.tsx":"20","D:\\wtf\\schedule-generator\\src\\components\\Logo\\index.tsx":"21","D:\\wtf\\schedule-generator\\src\\components\\Logo\\LongLogo.tsx":"22","D:\\wtf\\schedule-generator\\src\\components\\Meta\\DescribeRoute.tsx":"23","D:\\wtf\\schedule-generator\\src\\components\\Modal.tsx":"24","D:\\wtf\\schedule-generator\\src\\components\\Preview.tsx":"25","D:\\wtf\\schedule-generator\\src\\components\\Toast\\Context.tsx":"26","D:\\wtf\\schedule-generator\\src\\components\\_Preview.tsx":"27","D:\\wtf\\schedule-generator\\src\\config\\defaultTheme.ts":"28","D:\\wtf\\schedule-generator\\src\\config\\firebase\\index.ts":"29","D:\\wtf\\schedule-generator\\src\\config\\firebase-admin.ts":"30","D:\\wtf\\schedule-generator\\src\\config\\firebaseCert.ts":"31","D:\\wtf\\schedule-generator\\src\\handlers\\client\\db\\checkUserInDB.ts":"32","D:\\wtf\\schedule-generator\\src\\handlers\\client\\db\\updateCustomThemes.ts":"33","D:\\wtf\\schedule-generator\\src\\handlers\\client\\downloadScreenshot.ts":"34","D:\\wtf\\schedule-generator\\src\\handlers\\server\\optHandler.tsx":"35","D:\\wtf\\schedule-generator\\src\\hooks\\useIsomorphicLayoutEffect.ts":"36","D:\\wtf\\schedule-generator\\src\\hooks\\useTimeout.ts":"37","D:\\wtf\\schedule-generator\\src\\pages\\api\\screenshot.ts":"38","D:\\wtf\\schedule-generator\\src\\pages\\api\\test.ts":"39","D:\\wtf\\schedule-generator\\src\\pages\\index.tsx":"40","D:\\wtf\\schedule-generator\\src\\pages\\renderer\\[room].tsx":"41","D:\\wtf\\schedule-generator\\src\\pages\\_app.tsx":"42","D:\\wtf\\schedule-generator\\src\\pages\\_document.tsx":"43","D:\\wtf\\schedule-generator\\src\\utils\\constants.ts":"44","D:\\wtf\\schedule-generator\\src\\utils\\document.ts":"45","D:\\wtf\\schedule-generator\\src\\utils\\getKeptFile.ts":"46","D:\\wtf\\schedule-generator\\src\\utils\\hexToRgb.ts":"47","D:\\wtf\\schedule-generator\\src\\utils\\isDarkOrLight.ts":"48","D:\\wtf\\schedule-generator\\src\\utils\\object.ts":"49","D:\\wtf\\schedule-generator\\src\\utils\\screenshot.ts":"50","D:\\wtf\\schedule-generator\\src\\vectors\\Socials.tsx":"51"},{"size":11,"mtime":1699884716802,"results":"52","hashOfConfig":"53"},{"size":903,"mtime":1700212262455,"results":"54","hashOfConfig":"53"},{"size":156728,"mtime":1699884716807,"results":"55","hashOfConfig":"53"},{"size":593,"mtime":1700210847680,"results":"56","hashOfConfig":"53"},{"size":866,"mtime":1699973345982,"results":"57","hashOfConfig":"53"},{"size":497,"mtime":1699958113410,"results":"58","hashOfConfig":"53"},{"size":895,"mtime":1699886735767,"results":"59","hashOfConfig":"53"},{"size":1270,"mtime":1699886735767,"results":"60","hashOfConfig":"53"},{"size":560,"mtime":1699886735768,"results":"61","hashOfConfig":"53"},{"size":897,"mtime":1699959811958,"results":"62","hashOfConfig":"53"},{"size":1960,"mtime":1699884716811,"results":"63","hashOfConfig":"53"},{"size":1572,"mtime":1700212035885,"results":"64","hashOfConfig":"53"},{"size":296,"mtime":1699884716812,"results":"65","hashOfConfig":"53"},{"size":731,"mtime":1699884716814,"results":"66","hashOfConfig":"53"},{"size":663,"mtime":1699884716815,"results":"67","hashOfConfig":"53"},{"size":7597,"mtime":1700214145706,"results":"68","hashOfConfig":"53"},{"size":185,"mtime":1699884716833,"results":"69","hashOfConfig":"53"},{"size":1035,"mtime":1699884716816,"results":"70","hashOfConfig":"53"},{"size":24959,"mtime":1700213760187,"results":"71","hashOfConfig":"53"},{"size":7950,"mtime":1699884716819,"results":"72","hashOfConfig":"53"},{"size":3273,"mtime":1699886735782,"results":"73","hashOfConfig":"53"},{"size":43118,"mtime":1699884716822,"results":"74","hashOfConfig":"53"},{"size":1231,"mtime":1699884716824,"results":"75","hashOfConfig":"53"},{"size":2579,"mtime":1700230058254,"results":"76","hashOfConfig":"53"},{"size":151572,"mtime":1699884716829,"results":"77","hashOfConfig":"53"},{"size":2431,"mtime":1699884716831,"results":"78","hashOfConfig":"53"},{"size":144067,"mtime":1700210716941,"results":"79","hashOfConfig":"53"},{"size":4221,"mtime":1700209972354,"results":"80","hashOfConfig":"53"},{"size":701,"mtime":1699884716836,"results":"81","hashOfConfig":"53"},{"size":354,"mtime":1699884716835,"results":"82","hashOfConfig":"53"},{"size":309,"mtime":1699884716837,"results":"83","hashOfConfig":"53"},{"size":1035,"mtime":1699884716838,"results":"84","hashOfConfig":"53"},{"size":841,"mtime":1699884716838,"results":"85","hashOfConfig":"53"},{"size":1575,"mtime":1699884716839,"results":"86","hashOfConfig":"53"},{"size":2402,"mtime":1700024713667,"results":"87","hashOfConfig":"53"},{"size":156,"mtime":1699884716840,"results":"88","hashOfConfig":"53"},{"size":773,"mtime":1699884716840,"results":"89","hashOfConfig":"53"},{"size":631,"mtime":1699884716843,"results":"90","hashOfConfig":"53"},{"size":1306,"mtime":1700207288272,"results":"91","hashOfConfig":"53"},{"size":6578,"mtime":1699884716844,"results":"92","hashOfConfig":"53"},{"size":13626,"mtime":1700023736281,"results":"93","hashOfConfig":"53"},{"size":483,"mtime":1699886735784,"results":"94","hashOfConfig":"53"},{"size":1608,"mtime":1700230742009,"results":"95","hashOfConfig":"53"},{"size":1207,"mtime":1699950731899,"results":"96","hashOfConfig":"53"},{"size":1165,"mtime":1700230026558,"results":"97","hashOfConfig":"53"},{"size":350,"mtime":1699884716849,"results":"98","hashOfConfig":"53"},{"size":620,"mtime":1699884716849,"results":"99","hashOfConfig":"53"},{"size":2073,"mtime":1699884716850,"results":"100","hashOfConfig":"53"},{"size":128,"mtime":1699884716850,"results":"101","hashOfConfig":"53"},{"size":521,"mtime":1699887261885,"results":"102","hashOfConfig":"53"},{"size":4054,"mtime":1699884716853,"results":"103","hashOfConfig":"53"},{"filePath":"104","messages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"elivf3",{"filePath":"106","messages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"108","messages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"110","messages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"112","messages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114"},{"filePath":"115","messages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"117","messages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119"},{"filePath":"120","messages":"121","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"122","messages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124"},{"filePath":"125","messages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127"},{"filePath":"128","messages":"129","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130"},{"filePath":"131","messages":"132","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"133","messages":"134","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135"},{"filePath":"136","messages":"137","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138"},{"filePath":"139","messages":"140","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141"},{"filePath":"142","messages":"143","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"144","messages":"145","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"146","messages":"147","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"148","messages":"149","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150"},{"filePath":"151","messages":"152","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"153","messages":"154","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"155","messages":"156","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"157","messages":"158","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"159","messages":"160","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161"},{"filePath":"162","messages":"163","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"164","messages":"165","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"166","messages":"167","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"168","messages":"169","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"170","messages":"171","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"172","messages":"173","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"174","messages":"175","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"176","messages":"177","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"178","messages":"179","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"180","messages":"181","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"182","messages":"183","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"184","messages":"185","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"186","messages":"187","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"188","messages":"189","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"190","messages":"191","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"192","messages":"193","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"194","messages":"195","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"196"},{"filePath":"197","messages":"198","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"199","messages":"200","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"201","messages":"202","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"203","messages":"204","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"205","messages":"206","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"207","messages":"208","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"209","messages":"210","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"211","messages":"212","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"213","messages":"214","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"215","messages":"216","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\wtf\\schedule-generator\\src\\@types\\index.ts",[],"D:\\wtf\\schedule-generator\\src\\components\\Background\\colorful.tsx",[],"D:\\wtf\\schedule-generator\\src\\components\\Background\\Decorations\\index.tsx",[],"D:\\wtf\\schedule-generator\\src\\components\\Background\\flower.tsx",[],"D:\\wtf\\schedule-generator\\src\\components\\Background\\halloween.tsx",["217","218"],"import { FC } from \"react\"\r\nimport Image from \"next/image\"\r\n\r\nexport const HalloweenPreview: FC = () => {\r\n  return (\r\n    // <div className=\"absolute top-0 left-0 z-[2] h-full w-full\">\r\n    <div className=\"absolute top-[0px] left-[2.5px] -z-[2] h-[277px] w-[406px]\">\r\n      {/* <Image src=\"/assets/christmas-bg-preview.png\" width={2388} height={1668} /> */}\r\n      <Image src=\"/assets/halloween-bg.png\" width={2388} height={1668} />\r\n    </div>\r\n  )\r\n}\r\n\r\nconst Halloween: FC = () => {\r\n  return (\r\n    // <div className=\"absolute top-[50px] left-0 z-[2] h-[1668px] w-[2388px]\">\r\n    <div className=\"absolute top-[0px] left-0 -z-[2] h-[1886px] w-[2700px] \">\r\n      {/* <Image src=\"/assets/christmas-bg.png\" width={2388} height={1668} /> */}\r\n      <Image src=\"/assets/halloween-bg.png\" width={2700} height={1886} />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Halloween\r\n","D:\\wtf\\schedule-generator\\src\\components\\Background\\index.tsx",[],"D:\\wtf\\schedule-generator\\src\\components\\Background\\Mistletoe.tsx",["219","220"],"import { FC } from \"react\"\r\nimport Image from \"next/image\"\r\n\r\nexport const MistletoePreview: FC = () => {\r\n  return (\r\n    // <div className=\"absolute top-0 left-0 z-[2] h-full w-full\">\r\n    <div className=\"absolute top-[13.5px] left-[2.5px] z-[2] h-[277px] w-[406px]\">\r\n      {/* <Image src=\"/assets/christmas-bg-preview.png\" width={2388} height={1668} /> */}\r\n      <Image src=\"/assets/christmas-bg-rordor-preview.png\" width={2600} height={1768} />\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nconst Mistletoe: FC = () => {\r\n  return (\r\n    // <div className=\"absolute top-[50px] left-0 z-[2] h-[1668px] w-[2388px]\">\r\n    <div className=\"absolute top-[100px] left-0 z-[2] h-[1768px] w-[2600px] \">\r\n      {/* <Image src=\"/assets/christmas-bg.png\" width={2388} height={1668} /> */}\r\n      <Image src=\"/assets/christmas-bg-rordor.png\" width={2700} height={1886} />\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Mistletoe\r\n","D:\\wtf\\schedule-generator\\src\\components\\Background\\Ordaments.tsx",[],"D:\\wtf\\schedule-generator\\src\\components\\Background\\sticker.tsx",["221","222"],"import { FC } from \"react\"\r\nimport Image from \"next/image\"\r\n\r\nexport const StickerPreview: FC = () => {\r\n    return (\r\n        <div className=\"absolute top-0 left-0 z-[2] h-full w-full\">\r\n            <Image src=\"/assets/sticker-bg.png\" width={2700} height={1886}></Image>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Sticker: FC = () => {\r\n    return (\r\n        <div className=\"absolute top-0 right-0 z-[2] h-[1886px] w-[2700px] \">\r\n            <Image src=\"/assets/sticker-bg.png\" width={2700} height={1886}></Image>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Sticker\r\n","D:\\wtf\\schedule-generator\\src\\components\\Background\\sweetintherain.tsx",["223","224"],"import { FC } from \"react\"\r\nimport Image from \"next/image\"\r\n\r\nexport const SweetInTheRainPreview: FC = () => {\r\n  return (\r\n    // <div className=\"absolute top-0 left-0 z-[2] h-full w-full\">\r\n    <div className=\"absolute top-[0px] left-[2.5px] -z-[2] h-[277px] w-[406px]\">\r\n      {/* <Image src=\"/assets/christmas-bg-preview.png\" width={2388} height={1668} /> */}\r\n      <Image src=\"/assets/sweet-in-the-rain-bg.png\" width={2388} height={1668} />\r\n    </div>\r\n  )\r\n}\r\n\r\nconst SweetInTheRain: FC = () => {\r\n  return (\r\n    // <div className=\"absolute top-[50px] left-0 z-[2] h-[1668px] w-[2388px]\">\r\n    <div className=\"absolute top-[0px] left-0 -z-[2] h-[1886px] w-[2700px] \">\r\n      {/* <Image src=\"/assets/christmas-bg.png\" width={2388} height={1668} /> */}\r\n      <Image src=\"/assets/sweet-in-the-rain-bg.png\" width={2700} height={1886} />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SweetInTheRain\r\n","D:\\wtf\\schedule-generator\\src\\components\\ColorPicker.tsx",["225"],"import React, { useEffect, useState } from \"react\"\r\nimport reactCSS from \"reactcss\"\r\nimport { SketchPicker } from \"react-color\"\r\nimport { motion } from \"framer-motion\"\r\n\r\nexport interface ColorType {\r\n  r: string\r\n  g: string\r\n  b: string\r\n  a: string\r\n}\r\n\r\ninterface ColorPickerProps {\r\n  defaultColor?: ColorType\r\n  onChange?: (color: ColorType) => void\r\n}\r\n\r\nexport const ColorPicker = ({\r\n  defaultColor = { r: \"0\", g: \"0\", b: \"0\", a: \"1\" },\r\n  onChange = (color) => {},\r\n}: ColorPickerProps) => {\r\n  const [displayColorPicker, setDCP] = useState(false)\r\n  const [color, setColor] = useState(defaultColor)\r\n\r\n  const handleClick = () => {\r\n    setDCP((prev) => !prev)\r\n  }\r\n\r\n  const handleClose = () => {\r\n    setDCP(false)\r\n  }\r\n\r\n  const handleChange = (color: { rgb: ColorType }) => {\r\n    setColor(color.rgb)\r\n    onChange(color.rgb)\r\n  }\r\n\r\n  useEffect(() => {\r\n    handleChange({ rgb: defaultColor })\r\n  }, [defaultColor])\r\n\r\n  return (\r\n    <div>\r\n      <motion.div whileHover={{ scale: 1.1 }} onClick={handleClick}>\r\n        <div\r\n          className=\"h-[30px] w-[30px] cursor-pointer rounded-[10px] sm:h-[32px] sm:w-[42px]\"\r\n          style={{\r\n            background: `rgba(${color.r}, ${color.g}, ${color.b}, ${color.a})`,\r\n            border: \"1px solid rgba(0, 0, 0, 0.2)\",\r\n          }}\r\n        />\r\n      </motion.div>\r\n      {displayColorPicker ? (\r\n        <div\r\n          style={{\r\n            position: \"absolute\",\r\n            zIndex: 99,\r\n            touchAction: \"none\",\r\n          }}\r\n        >\r\n          <div\r\n            style={{\r\n              position: \"fixed\",\r\n              top: \"0px\",\r\n              right: \"0px\",\r\n              bottom: \"0px\",\r\n              left: \"0px\",\r\n              touchAction: \"none\",\r\n            }}\r\n            onClick={handleClose}\r\n          />\r\n          {/* @ts-ignore */}\r\n          <SketchPicker color={color} onChange={handleChange} />\r\n        </div>\r\n      ) : null}\r\n    </div>\r\n  )\r\n}\r\n","D:\\wtf\\schedule-generator\\src\\components\\ExamSchedule\\Components\\DownloadButton.tsx",[],"D:\\wtf\\schedule-generator\\src\\components\\ExamSchedule\\Components\\Preview.tsx",["226"],"import Image from \"next/image\"\r\nimport { FC } from \"react\"\r\n\r\nexport const ExamPreview: FC<{ imgSrc: string }> = ({ imgSrc }) => {\r\n  return (\r\n    <div className=\"relative h-[350px]\">\r\n      <Image layout=\"fill\" objectFit=\"contain\" className=\"h-full w-full\" src={imgSrc} />\r\n    </div>\r\n  )\r\n}\r\n","D:\\wtf\\schedule-generator\\src\\components\\ExamSchedule\\Components\\ScreenSize.tsx",["227"],"import Image from \"next/image\"\r\nimport { CSSProperties, Dispatch, FC, SetStateAction } from \"react\"\r\nimport { ScreenSizeType } from \"../Page\"\r\n\r\nexport const ScreenSizeButton: FC<{\r\n  title: string\r\n  imgSrc: string\r\n  screenSizeID: ScreenSizeType\r\n  setScreenSize: Dispatch<SetStateAction<ScreenSizeType>>\r\n  style: CSSProperties\r\n}> = ({ title, imgSrc, screenSizeID, setScreenSize, style }) => {\r\n  return (\r\n    <button onClick={() => setScreenSize(screenSizeID)} className=\"flex flex-col gap-2\">\r\n      <div style={style} className=\"rounded-md border border-gray-300 transition-colors\">\r\n        <Image width={250} height={250} className=\"rounded-md\" src={imgSrc} />\r\n      </div>\r\n      <p>{title}</p>\r\n    </button>\r\n  )\r\n}\r\n","D:\\wtf\\schedule-generator\\src\\components\\ExamSchedule\\Components\\ThemeButton.tsx",["228"],"import Image from \"next/image\"\r\nimport { Dispatch, FC, SetStateAction } from \"react\"\r\nimport { ThemeType } from \"../Page\"\r\n\r\nexport const ThemeButton: FC<{\r\n  title: string\r\n  imgSrc: string\r\n  themeID: ThemeType\r\n  setTheme: Dispatch<SetStateAction<ThemeType>>\r\n  style: object\r\n}> = ({ title, imgSrc, themeID, setTheme, style }) => {\r\n  return (\r\n    <button onClick={() => setTheme(themeID)} className=\"flex flex-col gap-2\">\r\n      <div style={style} className=\"rounded-md border border-gray-300 p-6 transition-colors\">\r\n        <Image width={270} height={480} className=\"rounded-md\" src={imgSrc} />\r\n      </div>\r\n      <p>{title}</p>\r\n    </button>\r\n  )\r\n}\r\n","D:\\wtf\\schedule-generator\\src\\components\\ExamSchedule\\Page.tsx",[],"D:\\wtf\\schedule-generator\\src\\components\\index.tsx",[],"D:\\wtf\\schedule-generator\\src\\components\\Input.tsx",[],"D:\\wtf\\schedule-generator\\src\\components\\LearnSchedule\\Page.tsx",["229","230","231","232"],"import type { NextPage } from \"next\"\r\nimport { CheckCircleIcon, ChevronUpIcon, PlusIcon, TrashIcon } from \"@heroicons/react/outline\"\r\nimport { ColorPicker, ColorType } from \"@components/ColorPicker\"\r\nimport React, { Dispatch, FC, Fragment, SetStateAction, useEffect, useState } from \"react\"\r\nimport { rawRgbColorToCss } from \"@utils/hexToRgb\"\r\nimport { isDarkOrLightRGBACustom } from \"@utils/isDarkOrLight\"\r\nimport classnames from \"classnames\"\r\nimport { _Preview as Preview } from \"@components\"\r\nimport { CheckIcon, ExclamationIcon, XIcon } from \"@heroicons/react/solid\"\r\nimport { motion } from \"framer-motion\"\r\nimport { Ellipsis } from \"@components/Loader/Ellipsis\"\r\nimport classNames from \"classnames\"\r\nimport { DescribeRoute } from \"@components/Meta/DescribeRoute\"\r\nimport { useAuth } from \"tucmc-auth\"\r\nimport { ColorTheme, DefaultTheme } from \"@config/defaultTheme\"\r\nimport { LongLogo } from \"@components/Logo/LongLogo\"\r\nimport { downloadScreenshot } from \"@handlers/client/downloadScreenshot\"\r\nimport { rooms } from \"@utils/constants\"\r\nimport { checkUserInDB } from \"@handlers/client/db/checkUserInDB\"\r\nimport { db } from \"@config/firebase\"\r\nimport { removeKey } from \"@utils/object\"\r\nimport { updateCustomThemes } from \"@handlers/client/db/updateCustomThemes\"\r\nimport Modal from \"@components/Modal\"\r\nimport { Input } from \"@components/Input\"\r\nimport Image from \"next/image\"\r\nimport { v4 as uuidv4 } from \"uuid\"\r\nimport { useTimeout } from \"@hooks/useTimeout\"\r\nimport { useToast } from \"@components/Toast/Context\"\r\n\r\ntype BGType = \"none\" | \"mistletoe\" | \"ordaments\" | \"sticker\" | \"flower\" | \"colorful\" | \"halloween\" | \"sweetintherain\"\r\n\r\nexport const LearnSchedulePage: FC<{\r\n  setBGcolor: Dispatch<SetStateAction<string>>\r\n  setPrimaryColor: Dispatch<SetStateAction<string>>\r\n}> = ({ setBGcolor, setPrimaryColor }) => {\r\n  const { userData, SignInWithTUCMC, signOut } = useAuth()\r\n  const toast = useToast()\r\n\r\n  const [waiting, setWaiting] = useState(false)\r\n\r\n  const [modalState, setModalState] = useState(false)\r\n  const [closeState, setCloseState] = useState(false)\r\n\r\n  const [background, setBackground] = useState(\"none\")\r\n  const [colors, setColors] = useState<ColorTheme>(DefaultTheme.Pink)\r\n  const [customThemes, setCustomThemes] = useState<Record<string, ColorTheme>>({})\r\n  const [theme, setTheme] = useState(\"d-Pink\") // d: default, c: custom\r\n  const [themeName, setThemeName] = useState(\"\")\r\n\r\n  const getColorsFromID = (themeID: string) => {\r\n    const trimmedTheme = themeID.replace(/(c|d)-/, \"\")\r\n\r\n    if (theme.startsWith(\"c-\")) {\r\n      return customThemes[trimmedTheme]\r\n    } else if (theme.startsWith(\"d-\")) {\r\n      return DefaultTheme[trimmedTheme]\r\n    } else {\r\n      return DefaultTheme.Pink\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (theme.startsWith(\"c-\") || theme.startsWith(\"d-\")) {\r\n      setColors(getColorsFromID(theme))\r\n      return\r\n    } else {\r\n      setTheme(\"d-Pink\")\r\n    }\r\n  }, [theme])\r\n\r\n  useEffect(() => {\r\n    if (userData) {\r\n      // set preferences, custom themes\r\n      checkUserInDB(db, userData as any, { background: background, theme: theme }, customThemes).then((data) => {\r\n        if (!data) return\r\n        setBackground(data.background)\r\n        setCustomThemes(data.customThemes)\r\n        setTheme(data.theme)\r\n      })\r\n    }\r\n  }, [userData])\r\n\r\n  useEffect(() => {\r\n    setBGcolor(rawRgbColorToCss(colors.c1))\r\n    setPrimaryColor(rawRgbColorToCss(colors.t1))\r\n  }, [colors])\r\n\r\n  const [invalidRoom, setInvalidRoom] = useState(false)\r\n  const [preset, setPreset] = useState(false)\r\n  const [room, setRoom] = useState(\"\")\r\n\r\n  useEffect(() => {\r\n    if (!rooms.includes(parseInt(room))) {\r\n      setInvalidRoom(true)\r\n    } else {\r\n      setInvalidRoom(false)\r\n    }\r\n  }, [room])\r\n\r\n  useEffect(() => {\r\n    const cachedRoom = window.localStorage.getItem(\"room\")\r\n    setRoom(cachedRoom ?? \"\")\r\n  }, [])\r\n\r\n  const toggleError = () => {\r\n    // setError(true)\r\n    // useTimeout(() => setError(false), 3000)\r\n    toast?.setToast(\"error\", \"หมายเลขห้องไม่ถูกต้อง\")\r\n  }\r\n\r\n  const toggleSuccess = () => {\r\n    // setSuccess(true)\r\n    // useTimeout(() => setSuccess(false), 3000)\r\n    toast?.setToast(\"success\", \"บันทึกข้อมูลสำเร็จ\")\r\n  }\r\n\r\n  const download = async () => {\r\n    if (waiting) return\r\n    if (invalidRoom) {\r\n      toggleError()\r\n      return\r\n    }\r\n\r\n    window.localStorage.setItem(\"room\", room)\r\n\r\n    downloadScreenshot(room, colors, background, setWaiting)\r\n  }\r\n\r\n  const toggle = {\r\n    open: {\r\n      rotate: 0,\r\n    },\r\n    close: {\r\n      rotate: 180,\r\n    },\r\n  }\r\n\r\n  const genBGButton = (inputBG: BGType) => {\r\n    if (inputBG === background)\r\n      return `text-${isDarkOrLightRGBACustom(colors.t1, 400) === \"light\" ? \"gray-600\" : \"white\"}`\r\n    else return \"text-gray-900\"\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <Modal\r\n        overlayClassName=\"fixed flex flex-col items-center justify-center top-0 left-0 bg-black bg-opacity-20 w-full min-h-screen z-[99]\"\r\n        className=\"flex min-w-[340px] flex-col items-center rounded-lg bg-white\"\r\n        // @ts-ignore\r\n        CloseDep={{\r\n          dep: closeState,\r\n          revert: () => {\r\n            setCloseState(false)\r\n          },\r\n        }}\r\n        // @ts-ignore\r\n        TriggerDep={{\r\n          dep: modalState,\r\n          revert: () => {\r\n            setModalState(false)\r\n          },\r\n        }}\r\n      >\r\n        <div className=\"flex flex-col items-center px-4 py-4\">\r\n          <div className=\"mt-1 mb-2 p-3\">\r\n            <Image src=\"/assets/art-and-design.png\" layout=\"intrinsic\" width={60} height={60} />\r\n          </div>\r\n          <div className=\"space-y-1\">\r\n            <h2 className=\"text-center text-gray-900\">สร้างธีมสีใหม่</h2>\r\n          </div>\r\n        </div>\r\n        <div className=\"w-full space-y-6 rounded-b-lg bg-gray-100 px-4 py-4\">\r\n          <div className=\"space-y-2\">\r\n            <input\r\n              onChange={(e) => setThemeName(e.target.value)}\r\n              value={themeName}\r\n              type=\"text\"\r\n              className=\"outline-none h-10 w-full appearance-none rounded-md border border-gray-300 px-4 py-2 placeholder-gray-500 shadow-sm focus:border-pink-500 focus:ring-pink-500\"\r\n              placeholder=\"ชื่อธีมสี\"\r\n            />\r\n            <button\r\n              onClick={() => {\r\n                if (themeName === \"\" || !userData) return\r\n\r\n                // save stuff\r\n                const generatedID = uuidv4()\r\n\r\n                const newCustomThemes = { ...customThemes, [generatedID]: { ...colors, name: themeName } }\r\n                setCustomThemes(newCustomThemes)\r\n                setTheme(`c-${generatedID}`)\r\n                // save to db\r\n                updateCustomThemes(db, userData as any, newCustomThemes, theme)\r\n                toggleSuccess()\r\n                setCloseState(true)\r\n                setThemeName(\"\")\r\n              }}\r\n              className=\"flex w-full items-center justify-center space-x-1 rounded-lg bg-green-400 py-2 text-white\"\r\n            >\r\n              <CheckCircleIcon className=\"h-5 w-5\" />\r\n              <span>ยืนยัน</span>\r\n            </button>\r\n            <button\r\n              onClick={() => {\r\n                setCloseState(true)\r\n              }}\r\n              className=\"w-full rounded-lg border border-gray-400 bg-white py-2 text-gray-600\"\r\n            >\r\n              ยกเลิก\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </Modal>\r\n\r\n      <header>\r\n        <h1 className=\"mb-1 text-xl font-medium text-gray-800 sm:text-2xl\">\r\n          ระบบจัดการตารางเรียน\r\n          <br />\r\n          ภาคเรียนที่ 2 ปีการศึกษา 2566\r\n        </h1>\r\n        <p className=\"mt-3 text-sm leading-5 text-gray-400\">\r\n          ระบบนี้เป็นระบบสำหรับดาวน์โหลดตารางเรียนที่ทาง กช.&nbsp;\r\n          <br className=\"hidden sm:block\" />\r\n          จัดทำขึ้น ไม่ได้มีความเกี่ยวข้องกับทางโรงเรียนแต่อย่างใด\r\n          <br />\r\n        </p>\r\n\r\n        <div className=\"mt-4 flex flex-col space-y-2\">\r\n          {!userData ? (\r\n            <>\r\n              <p>เข้าสู่ระบบเพื่อบันทึกธีมสีของคุณ</p>\r\n              <div className=\"w-48 transition-transform hover:scale-105\">\r\n                <SignInWithTUCMC />\r\n              </div>\r\n            </>\r\n          ) : (\r\n            <button\r\n              onClick={() => signOut()}\r\n              className=\"w-36 rounded-full border border-gray-400 bg-white px-6 py-2 text-center transition-colors hover:border-gray-600 hover:bg-gray-100\"\r\n            >\r\n              ออกจากระบบ\r\n            </button>\r\n          )}\r\n        </div>\r\n      </header>\r\n\r\n      {/* classroom */}\r\n      <section className=\"mt-12 space-y-2\">\r\n        <h2 className=\"text-xl font-medium text-gray-600 sm:text-2xl\">ใส่เลขห้องเรียน</h2>\r\n        <div className=\"flex flex-col items-start sm:flex-row sm:items-center\">\r\n          <div className=\"relative w-48\">\r\n            <input\r\n              onChange={(e) => {\r\n                if (e.target.value.length > 3) return\r\n                setRoom(e.target.value)\r\n              }}\r\n              value={room}\r\n              placeholder=\"เลขห้อง\"\r\n              className={classnames(\r\n                \"w-full rounded-xl border border-gray-300 pl-4 pt-2 pb-1.5 text-xl text-gray-500\",\r\n                invalidRoom ? \"border-red-400\" : \" border-green-400\"\r\n              )}\r\n            />\r\n            <div className=\"absolute top-0 right-3.5 flex h-full items-center justify-end\">\r\n              {!invalidRoom ? (\r\n                <CheckIcon className=\"h-5 w-5 text-green-500\" />\r\n              ) : (\r\n                <XIcon className=\"h-5 w-5 text-red-400\" />\r\n              )}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </section>\r\n\r\n      {/* themes */}\r\n      <section className=\"mt-12 space-y-4 sm:space-y-6\">\r\n        <h2 className=\"text-xl font-medium text-gray-600 sm:text-2xl\">ปรับแต่งตารางเรียน</h2>\r\n        <div className=\"flex flex-col justify-center\">\r\n          <h3 className=\"mb-2 text-lg font-medium text-gray-600\">ธีมสี </h3>\r\n\r\n          <div className=\"relative flex h-[44px] w-[240px]\">\r\n            {/* dropdown */}\r\n            <div className=\"flex w-full rounded-xl border border-gray-300\">\r\n              <div className=\"flex w-9/12 cursor-pointer items-center justify-center\">\r\n                <div\r\n                  style={{ backgroundColor: rawRgbColorToCss(colors.t1) }}\r\n                  className=\"mr-2 h-5 w-5 rounded-full shadow-sm\"\r\n                />\r\n                <span className=\"mt-1 text-gray-600\">{getColorsFromID(theme).name}</span>\r\n              </div>\r\n              <button\r\n                onClick={() => {\r\n                  setPreset((prev) => !prev)\r\n                }}\r\n                className=\"flex w-3/12 cursor-pointer items-center justify-center rounded-r-xl border-l border-gray-300 transition-colors hover:bg-gray-100\"\r\n              >\r\n                <motion.div variants={toggle} animate={preset ? \"close\" : \"open\"}>\r\n                  <ChevronUpIcon className=\"h-5 w-5 text-gray-700\" />\r\n                </motion.div>\r\n              </button>\r\n            </div>\r\n\r\n            {/* expand */}\r\n            {preset && (\r\n              <>\r\n                {/* default presets */}\r\n                <div\r\n                  style={{ position: \"fixed\", top: \"0px\", right: \"0px\", bottom: \"0px\", left: \"0px\" }}\r\n                  onClick={() => {\r\n                    setPreset(false)\r\n                  }}\r\n                />\r\n                <div className=\"absolute bottom-12 max-h-[28rem] w-full space-y-2 overflow-y-auto rounded-lg bg-white px-6 py-4 shadow-lg\">\r\n                  <div className=\"py-2\">\r\n                    <h3 className=\"mb-2\">ธีมสีเบื้องต้น</h3>\r\n                    <hr className=\"border-1 mb-3 rounded-lg border-gray-300\" />\r\n                    <div className=\"space-y-2.5\">\r\n                      {Object.keys(DefaultTheme).map((colorID) => (\r\n                        <div\r\n                          onClick={() => {\r\n                            setTheme(`d-${colorID}`)\r\n                          }}\r\n                          className=\"mb-1 flex cursor-pointer text-gray-400\"\r\n                          key={`d-${colorID}`}\r\n                        >\r\n                          <div\r\n                            style={{ backgroundColor: rawRgbColorToCss(DefaultTheme[colorID].t1) }}\r\n                            className=\"mr-2 h-5 w-5 rounded-full shadow-sm\"\r\n                          />\r\n                          <span\r\n                            className={classnames(\r\n                              `d-${colorID}` !== theme ? \"transition-colors hover:text-gray-500\" : \"text-gray-800\"\r\n                            )}\r\n                          >\r\n                            {DefaultTheme[colorID.replace(/(c|d)-/, \"\")].name}\r\n                          </span>\r\n                        </div>\r\n                      ))}\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div className=\"py-2\">\r\n                    <div className=\"mb-2 flex items-center justify-between\">\r\n                      <h3 className=\"\">ธีมสีที่สร้าง</h3>\r\n                      {!userData ? (\r\n                        <div></div>\r\n                      ) : (\r\n                        <button\r\n                          onClick={() => {\r\n                            setModalState(true)\r\n                          }}\r\n                        >\r\n                          <PlusIcon className=\"h-4 w-4 text-gray-600\" />\r\n                        </button>\r\n                      )}\r\n                    </div>\r\n                    <hr className=\"border-1 mb-3 rounded-lg border-gray-300\" />\r\n                    <div className=\"space-y-2.5\">\r\n                      {!userData ? (\r\n                        <p className=\"text-sm text-gray-400\">เข้าสู่ระบบเพื่อบันทึกธีมสีที่สร้าง</p>\r\n                      ) : (\r\n                        Object.keys(customThemes).map((cTheme) => {\r\n                          return (\r\n                            <div\r\n                              onClick={() => {\r\n                                setTheme(`c-${cTheme}`)\r\n                              }}\r\n                              className=\"mb-1 flex cursor-pointer text-gray-400\"\r\n                              key={`c-${cTheme}`}\r\n                            >\r\n                              <button\r\n                                onClick={(e) => {\r\n                                  e.stopPropagation()\r\n                                  setTheme(\"d-Pink\")\r\n\r\n                                  const newCustomThemes = removeKey(customThemes, cTheme)\r\n                                  setCustomThemes(newCustomThemes)\r\n                                  // save to db\r\n                                  updateCustomThemes(db, userData as any, newCustomThemes, theme)\r\n                                  toggleSuccess()\r\n                                }}\r\n                              >\r\n                                <TrashIcon className=\"mr-2 h-5 w-5 text-gray-400 transition-colors hover:text-red-400\" />\r\n                              </button>\r\n                              <div\r\n                                style={{ backgroundColor: rawRgbColorToCss(customThemes[cTheme].t1) }}\r\n                                className=\"mr-2 h-5 w-5 rounded-full shadow-sm\"\r\n                              />\r\n                              <span\r\n                                className={classnames(\r\n                                  `c-${cTheme}` !== theme ? \"transition-colors hover:text-gray-500\" : \"text-gray-800\"\r\n                                )}\r\n                              >\r\n                                {customThemes[cTheme].name}\r\n                              </span>\r\n                            </div>\r\n                          )\r\n                        })\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </>\r\n            )}\r\n          </div>\r\n        </div>\r\n\r\n        {/* color swatches */}\r\n        <section className=\"flex flex-col items-start sm:flex-row sm:items-center\">\r\n          <div className=\"flex flex-col justify-center\">\r\n            <div className=\"mb-4 flex items-center justify-between space-x-4\">\r\n              <h3 className=\"text-lg font-medium text-gray-600\">ชุดสี </h3>\r\n              {userData ? (\r\n                <button\r\n                  onClick={() => {\r\n                    // if editing default theme, create new customTheme\r\n                    if (theme.startsWith(\"d-\")) {\r\n                      setModalState(true)\r\n                    }\r\n                    // if editing custom theme, override it\r\n                    else if (theme.startsWith(\"c-\")) {\r\n                      const newCustomThemes = { ...customThemes, [theme.replace(\"c-\", \"\")]: { ...colors } }\r\n                      setCustomThemes(newCustomThemes)\r\n                      // save to db\r\n                      updateCustomThemes(db, userData as any, newCustomThemes, theme)\r\n                      toggleSuccess()\r\n                    }\r\n                  }}\r\n                  className=\"rounded-full border border-gray-300 bg-white px-6 py-2 text-center transition-colors hover:bg-gray-100\"\r\n                >\r\n                  บันทึก\r\n                </button>\r\n              ) : (\r\n                <div></div>\r\n              )}\r\n            </div>\r\n\r\n            <div className=\"flex flex-row flex-wrap gap-2\">\r\n              <div className=\"mr-2 flex items-center space-x-1\">\r\n                <ColorPicker\r\n                  onChange={(c) => {\r\n                    setColors((prev) => {\r\n                      return { ...prev, bg: c }\r\n                    })\r\n                  }}\r\n                  defaultColor={colors.bg}\r\n                />\r\n                <ColorPicker\r\n                  onChange={(c) => {\r\n                    setColors((prev) => {\r\n                      return { ...prev, t1: c }\r\n                    })\r\n                  }}\r\n                  defaultColor={colors.t1}\r\n                />\r\n                <ColorPicker\r\n                  onChange={(c) => {\r\n                    setColors((prev) => {\r\n                      return { ...prev, t2: c }\r\n                    })\r\n                  }}\r\n                  defaultColor={colors.t2}\r\n                />\r\n              </div>\r\n              <div className=\"flex items-center space-x-1\">\r\n                <ColorPicker\r\n                  onChange={(c) => {\r\n                    setColors((prev) => {\r\n                      return { ...prev, c1: c }\r\n                    })\r\n                  }}\r\n                  defaultColor={colors.c1}\r\n                />\r\n                <ColorPicker\r\n                  onChange={(c) => {\r\n                    setColors((prev) => {\r\n                      return { ...prev, c2: c }\r\n                    })\r\n                  }}\r\n                  defaultColor={colors.c2}\r\n                />\r\n                <ColorPicker\r\n                  onChange={(c) => {\r\n                    setColors((prev) => {\r\n                      return { ...prev, c3: c }\r\n                    })\r\n                  }}\r\n                  defaultColor={colors.c3}\r\n                />\r\n                <ColorPicker\r\n                  onChange={(c) => {\r\n                    setColors((prev) => {\r\n                      return { ...prev, c4: c }\r\n                    })\r\n                  }}\r\n                  defaultColor={colors.c4}\r\n                />\r\n                <ColorPicker\r\n                  onChange={(c) => {\r\n                    setColors((prev) => {\r\n                      return { ...prev, c5: c }\r\n                    })\r\n                  }}\r\n                  defaultColor={colors.c5}\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </section>\r\n\r\n        {/* background */}\r\n        <section className=\"flex flex-col justify-center space-y-2\">\r\n          <h3 className=\"mb-2 text-lg font-medium text-gray-600\">พื้นหลัง </h3>\r\n          <div className=\"flex\">\r\n            <div className=\"space-x-1 space-y-1\">\r\n              <button\r\n                onClick={() => setBackground(\"none\")}\r\n                className={classNames(genBGButton(\"none\"), \"rounded-xl border border-gray-300 px-4 py-2\")}\r\n                style={{ backgroundColor: background === \"none\" ? rawRgbColorToCss(colors.t1) : \"#fff\" }}\r\n              >\r\n                ไม่มี\r\n              </button>\r\n              {/* <button\r\n              onClick={() => setBackground(\"ordaments\")}\r\n              className={classNames(genBGButton(\"ordaments\"), \"rounded-xl border border-gray-300 px-4 py-2\")}\r\n              style={{ backgroundColor: background === \"ordaments\" ? rawRgbColorToCss(colors.t1) : \"#fff\" }}\r\n            >\r\n              Christmas Town\r\n            </button>\r\n            <button\r\n              onClick={() => setBackground(\"mistletoe\")}\r\n              className={classNames(genBGButton(\"mistletoe\"), \"rounded-xl border border-gray-300 px-4 py-2\")}\r\n              style={{ backgroundColor: background === \"mistletoe\" ? rawRgbColorToCss(colors.t1) : \"#fff\" }}\r\n            >\r\n              Mistletoe\r\n            </button> */}\r\n              <button\r\n                onClick={() => setBackground(\"sticker\")}\r\n                className={classNames(genBGButton(\"sticker\"), \"rounded-xl border border-gray-300 px-4 py-2\")}\r\n                style={{ backgroundColor: background === \"sticker\" ? rawRgbColorToCss(colors.t1) : \"#fff\" }}\r\n              >\r\n                COOL KIDS starter pack\r\n              </button>\r\n              <button\r\n                onClick={() => setBackground(\"flower\")}\r\n                className={classNames(genBGButton(\"flower\"), \"rounded-xl border border-gray-300 px-4 py-2\")}\r\n                style={{ backgroundColor: background === \"flower\" ? rawRgbColorToCss(colors.t1) : \"#fff\" }}\r\n              >\r\n                Dans le Jardin\r\n              </button>\r\n              <button\r\n                onClick={() => setBackground(\"colorful\")}\r\n                className={classNames(genBGButton(\"colorful\"), \"rounded-xl border border-gray-300 px-4 py-2\")}\r\n                style={{ backgroundColor: background === \"colorful\" ? rawRgbColorToCss(colors.t1) : \"#fff\" }}\r\n              >\r\n                Colorful\r\n              </button>\r\n              <button\r\n                onClick={() => setBackground(\"halloween\")}\r\n                className={classNames(genBGButton(\"halloween\"), \"rounded-xl border border-gray-300 px-4 py-2\")}\r\n                style={{ backgroundColor: background === \"halloween\" ? rawRgbColorToCss(colors.t1) : \"#fff\" }}\r\n              >\r\n                Halloween\r\n              </button>\r\n              <button\r\n                onClick={() => setBackground(\"sweetintherain\")}\r\n                className={classNames(genBGButton(\"sweetintherain\"), \"rounded-xl border border-gray-300 px-4 py-2\")}\r\n                style={{ backgroundColor: background === \"sweetintherain\" ? rawRgbColorToCss(colors.t1) : \"#fff\" }}\r\n              >\r\n                Sweet in the Rain\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </section>\r\n      </section>\r\n\r\n      {/* preview */}\r\n      <>\r\n        <Preview rawTheme={colors} background={background} />\r\n      </>\r\n\r\n      {/* download */}\r\n      <div className=\"mt-8 flex justify-center sm:mt-10\">\r\n        <motion.button\r\n          whileHover={{ scale: !waiting ? 1.05 : 1 }}\r\n          onClick={download}\r\n          className={classnames(\r\n            \"w-full rounded-xl text-white transition-colors sm:w-max\",\r\n            waiting ? \"cursor-not-allowed px-[60px] pb-[10px] pt-[2px]\" : \"py-2.5 px-6\"\r\n          )}\r\n          style={{\r\n            backgroundColor: rawRgbColorToCss(colors.t1),\r\n            color: isDarkOrLightRGBACustom(colors.t1, 400) === \"light\" ? \"#111827\" : \"#fff\",\r\n          }}\r\n        >\r\n          {!waiting ? <span>สร้างตารางเรียน</span> : <Ellipsis className=\"w-10\" />}\r\n        </motion.button>\r\n      </div>\r\n      <LongLogo className=\"mx-auto mt-6\" color={rawRgbColorToCss(colors.t1)} />\r\n    </Fragment>\r\n  )\r\n}\r\n","D:\\wtf\\schedule-generator\\src\\components\\Loader\\Ellipsis.tsx",[],"D:\\wtf\\schedule-generator\\src\\components\\Logo\\index.tsx",[],"D:\\wtf\\schedule-generator\\src\\components\\Logo\\LongLogo.tsx",[],"D:\\wtf\\schedule-generator\\src\\components\\Meta\\DescribeRoute.tsx",[],"D:\\wtf\\schedule-generator\\src\\components\\Modal.tsx",["233"],"import { motion } from \"framer-motion\"\r\nimport classnames from \"classnames\"\r\nimport { DetectOutside } from \"@utils/document\"\r\nimport { useEffect, useRef, useState } from \"react\"\r\n\r\nconst Modal = ({\r\n  // @ts-ignore\r\n  children,\r\n  overlayClassName = \"\",\r\n  className = \"\",\r\n  TriggerRef = null,\r\n  CloseID = \"\",\r\n  TriggerDep = null,\r\n  CloseDep = null,\r\n  closeClickOutside = true,\r\n  ToggleDep = null,\r\n  reloadChildren = false,\r\n}) => {\r\n  const [modalState, setModalState] = useState({ comm: false, hide: true })\r\n  const [prevent, setPrevent] = useState(true)\r\n  const panel = useRef(null)\r\n\r\n  const trigger = () => {\r\n    setModalState((prevState) => ({ comm: !prevState.comm, hide: false }))\r\n  }\r\n\r\n  useEffect(() => {\r\n    // @ts-ignore\r\n    TriggerRef !== null && TriggerRef.current && TriggerRef.current.addEventListener(\"mousedown\", trigger)\r\n  }, [TriggerRef])\r\n\r\n  useEffect(() => {\r\n    if (ToggleDep !== null) {\r\n      ToggleDep && open()\r\n      !ToggleDep && close()\r\n    }\r\n  }, [ToggleDep])\r\n\r\n  const close = () => {\r\n    setModalState({ comm: false, hide: false })\r\n  }\r\n\r\n  const open = () => {\r\n    setModalState({ comm: true, hide: false })\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (CloseID !== \"\") {\r\n      // @ts-ignore\r\n      document.getElementById(CloseID).addEventListener(\"mousedown\", close)\r\n    }\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    if (CloseDep !== null) {\r\n      // @ts-ignore\r\n      if (CloseDep.dep) {\r\n        close()\r\n        // @ts-ignore\r\n        CloseDep.revert()\r\n      }\r\n    }\r\n  }, [CloseDep])\r\n\r\n  const variants = {\r\n    show: { opacity: 1 },\r\n    hide: { opacity: 0 },\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (modalState.comm) {\r\n      setPrevent(false)\r\n    } else {\r\n      setPrevent(true)\r\n    }\r\n  }, [modalState])\r\n\r\n  useEffect(() => {\r\n    if (TriggerDep !== null) {\r\n      // @ts-ignore\r\n      if (TriggerDep.dep) {\r\n        open()\r\n        // @ts-ignore\r\n        TriggerDep.revert()\r\n      }\r\n    }\r\n  }, [TriggerDep])\r\n\r\n  closeClickOutside &&\r\n    DetectOutside(panel, !prevent, () => {\r\n      close()\r\n    })\r\n\r\n  return (\r\n    <div className={classnames(overlayClassName, modalState.hide && \"hidden\")}>\r\n      <motion.div\r\n        ref={panel}\r\n        variants={variants}\r\n        animate={modalState.comm ? \"open\" : \"hide\"}\r\n        onAnimationComplete={() => {\r\n          !modalState.comm && setModalState({ comm: false, hide: true })\r\n        }}\r\n        className={className}\r\n      >\r\n        {reloadChildren ? !modalState.hide && children : children}\r\n      </motion.div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Modal\r\n","D:\\wtf\\schedule-generator\\src\\components\\Preview.tsx",[],"D:\\wtf\\schedule-generator\\src\\components\\Toast\\Context.tsx",[],"D:\\wtf\\schedule-generator\\src\\components\\_Preview.tsx",[],"D:\\wtf\\schedule-generator\\src\\config\\defaultTheme.ts",[],"D:\\wtf\\schedule-generator\\src\\config\\firebase\\index.ts",[],"D:\\wtf\\schedule-generator\\src\\config\\firebase-admin.ts",[],"D:\\wtf\\schedule-generator\\src\\config\\firebaseCert.ts",[],"D:\\wtf\\schedule-generator\\src\\handlers\\client\\db\\checkUserInDB.ts",[],"D:\\wtf\\schedule-generator\\src\\handlers\\client\\db\\updateCustomThemes.ts",[],"D:\\wtf\\schedule-generator\\src\\handlers\\client\\downloadScreenshot.ts",[],"D:\\wtf\\schedule-generator\\src\\handlers\\server\\optHandler.tsx",[],"D:\\wtf\\schedule-generator\\src\\hooks\\useIsomorphicLayoutEffect.ts",[],"D:\\wtf\\schedule-generator\\src\\hooks\\useTimeout.ts",[],"D:\\wtf\\schedule-generator\\src\\pages\\api\\screenshot.ts",[],"D:\\wtf\\schedule-generator\\src\\pages\\api\\test.ts",[],"D:\\wtf\\schedule-generator\\src\\pages\\index.tsx",[],"D:\\wtf\\schedule-generator\\src\\pages\\renderer\\[room].tsx",["234"],"import { Logo } from \"@components\"\r\nimport type { GetStaticPaths, GetStaticProps } from \"next\"\r\nimport Head from \"next/head\"\r\nimport fs from \"fs\"\r\nimport path from \"path\"\r\nimport { hexToRgbA, rawRgbColorToCss } from \"@utils/hexToRgb\"\r\nimport { useEffect, useState } from \"react\"\r\nimport { useRouter } from \"next/router\"\r\nimport { isDarkOrLightHEX, isDarkOrLightRGBAString, isDarkOrLightRGBAStringD } from \"@utils/isDarkOrLight\"\r\nimport Image from \"next/image\"\r\nimport classNames from \"classnames\"\r\nimport { Mistletoe, Ordaments, Sticker, Flower, Colorful, Halloween, SweetInTheRain } from \"@components/Background\"\r\nimport { selOpt } from \"@handlers/server/optHandler\"\r\n\r\nconst defaultColors = {\r\n  bg: rawRgbColorToCss(hexToRgbA(\"#FFFFFF\")),\r\n  t1: rawRgbColorToCss(hexToRgbA(\"#D17474\")),\r\n  t2: rawRgbColorToCss(hexToRgbA(\"#E28B8B\")),\r\n  c1: rawRgbColorToCss(hexToRgbA(\"#EBB8B8\")),\r\n  c2: rawRgbColorToCss(hexToRgbA(\"#E49E9E\")),\r\n  c3: rawRgbColorToCss(hexToRgbA(\"#E08484\")),\r\n  c4: rawRgbColorToCss(hexToRgbA(\"#D17474\")),\r\n  c5: rawRgbColorToCss(hexToRgbA(\"#BA5757\")),\r\n}\r\n\r\ninterface ScheduleMeta {\r\n  branch: string\r\n  teacher: string[]\r\n  room: string\r\n  opt: number\r\n}\r\n\r\ninterface ScheduleBody {\r\n  [key: string]: string[]\r\n}\r\n\r\ninterface ScheduleData {\r\n  meta: ScheduleMeta\r\n  body: ScheduleBody\r\n  room: string\r\n}\r\n\r\nexport const getStaticPaths: GetStaticPaths = async () => {\r\n  const files = fs.readdirSync(path.join(process.cwd(), \"_keep/data/2-2566\"))\r\n\r\n  const paths = files\r\n    .filter((i) => i.includes(\".json\"))\r\n    .map((s) => ({\r\n      params: { room: s.replace(\".json\", \"\") },\r\n    }))\r\n\r\n  return {\r\n    paths,\r\n    fallback: false,\r\n  }\r\n}\r\n\r\nexport const getStaticProps: GetStaticProps = async ({ params }) => {\r\n  const room = params?.room\r\n  let scheduleData: ScheduleData | null = null\r\n  if (params) {\r\n    const raw = fs.readFileSync(path.join(process.cwd(), `_keep/data/2-2566/${room}.json`)).toString()\r\n    scheduleData = JSON.parse(raw)\r\n    scheduleData = selOpt(scheduleData)\r\n  }\r\n\r\n  return {\r\n    props: {\r\n      scheduleData: { ...scheduleData, room: room },\r\n    },\r\n  }\r\n}\r\n\r\ninterface RoomProps {\r\n  scheduleData: ScheduleData\r\n  query: any\r\n}\r\n\r\ntype BGType = \"none\" | \"mistletoe\" | \"ordaments\" | \"sticker\" | \"flower\" | \"colorful\" | \"halloween\" | \"sweetintherain\"\r\n\r\nconst Room = ({ scheduleData }: RoomProps) => {\r\n  const router = useRouter()\r\n\r\n  useEffect(() => {\r\n    if (!router.query.colorScheme) {\r\n      return\r\n    }\r\n\r\n    if (router.query?.bg) setBackground(router.query.bg as BGType)\r\n\r\n    const colorScheme: string = router.query.colorScheme?.toString()\r\n    const parsed = JSON.parse(colorScheme)\r\n\r\n    const cssColor: { [k: string]: string } = {}\r\n\r\n    Object.keys(parsed).forEach((k) => {\r\n      // @ts-ignore\r\n      cssColor[k] = rawRgbColorToCss(parsed[k])\r\n    })\r\n\r\n    // @ts-ignore\r\n    setColor(cssColor)\r\n  }, [router.query.colorScheme])\r\n\r\n  const [color, setColor] = useState(defaultColors)\r\n  const [background, setBackground] = useState<BGType>(\"none\")\r\n\r\n  const genSchedule = (period: number) => {\r\n    return (\r\n      <>\r\n        {Array(4)\r\n          .fill(\"\")\r\n          .map((_, i) => {\r\n            const name = period in scheduleData?.body[i + 1] ? scheduleData?.body[i + 1][period][0] : \"\" ?? \"\"\r\n            const teacher = period in scheduleData?.body[i + 1] ? scheduleData?.body[i + 1][period][1] : \"\" ?? \"\"\r\n\r\n            if (name || teacher)\r\n              return (\r\n                <div style={{ backgroundColor: \"#fff\" }} className=\"button\" key={i}>\r\n                  {/* <div className=\"line\" style={{ backgroundColor: Days[i].color }}></div> */}\r\n                  <div className=\"text\">\r\n                    <strong\r\n                      className=\"subject\"\r\n                      style={{ color: isDarkOrLightRGBAString(color.bg) === \"light\" ? \"#000\" : \"#000\" }}\r\n                    >\r\n                      {name}\r\n                    </strong>\r\n                    <p\r\n                      className=\"teacher\"\r\n                      style={{ color: isDarkOrLightRGBAString(color.bg) === \"light\" ? \"#a6a8ab\" : \"#000\" }}\r\n                    >\r\n                      {teacher?.replace(/\\+/g, \" \")}\r\n                    </p>\r\n                  </div>\r\n                </div>\r\n              )\r\n            else return <div className=\"blank\"></div>\r\n          })}\r\n      </>\r\n    )\r\n  }\r\n\r\n  const Days = [\r\n    {\r\n      name: \"จันทร์\",\r\n      color: color.c1,\r\n      order: 1,\r\n    },\r\n    {\r\n      name: \"อังคาร\",\r\n      color: color.c2,\r\n      order: 2,\r\n    },\r\n    {\r\n      name: \"พุธ\",\r\n      color: color.c3,\r\n      order: 3,\r\n    },\r\n    {\r\n      name: \"พฤหัสฯ\",\r\n      color: color.c4,\r\n      order: 4,\r\n    },\r\n    {\r\n      name: \"ศุกร์\",\r\n      color: color.c5,\r\n      order: 5,\r\n    },\r\n  ]\r\n\r\n  const getClassNumber = (day: number) => {\r\n    let classNumber = 0\r\n    for (let i in scheduleData.body[day]) {\r\n      if (scheduleData.body[day][i] != \"\") {\r\n        classNumber++\r\n      }\r\n    }\r\n    return classNumber\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {/* <div className=\"absolute top-0 left-0 w-[2388px] h-[1668px] opacity-20 z-20\">\r\n        <Image src=\"/ref.png\" width={2388} height={1668} />\r\n      </div> */}\r\n      <div style={{ backgroundColor: color.bg }} className=\"h-[1886px] w-[2700px]\">\r\n        <div style={{ backgroundColor: color.bg }} className=\"wrapper\">\r\n          {background === \"mistletoe\" && <Mistletoe />}\r\n          {background === \"ordaments\" && <Ordaments color={color.c1} />}\r\n          {background === \"sticker\" && <Sticker />}\r\n          {background === \"flower\" && <Flower />}\r\n          {background === \"colorful\" && <Colorful />}\r\n          {background === \"halloween\" && <Halloween />}\r\n          {background === \"sweetintherain\" && <SweetInTheRain />}\r\n          <div className=\"header\">\r\n            <div className=\"left\">\r\n              {/*<div className=\"bar\"></div>*/}\r\n              <div className=\"title-container\">\r\n                <h1 className=\"title\" style={{ color: color.t1 }}>\r\n                  ตารางเรียน\r\n                </h1>\r\n                <p className=\"subtitle\" style={{ color: color.t2 }}>\r\n                  ภาคเรียนที่ 2/2566\r\n                </p>\r\n              </div>\r\n            </div>\r\n            <div className=\"right\">\r\n              <h2 className=\"room\" style={{ color: color.t2 }}>\r\n                ห้อง {scheduleData.room} | {scheduleData.meta.branch}\r\n              </h2>\r\n              <div className=\"teacher\" style={{ color: color.t2 }}>\r\n                {scheduleData.meta.teacher.map((teacher) => (\r\n                  <p className=\"text\" key={teacher}>\r\n                    {teacher}\r\n                  </p>\r\n                ))}\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"main\">\r\n            <div className=\"days\">\r\n              {Days.map((day) => (\r\n                <div className={classNames(\"day\", day.name === \"ศุกร์\" && \"friday\")} key={day.name}>\r\n                  <div\r\n                    className=\"button\"\r\n                    style={{\r\n                      backgroundColor: day.color,\r\n                      color: isDarkOrLightRGBAStringD(day.color) === \"light\" ? \"#444\" : \"#fff\",\r\n                    }}\r\n                  >\r\n                    {day.name}\r\n                  </div>\r\n                  <div\r\n                    className=\"line\"\r\n                    style={{ backgroundColor: day.color, width: 300 + 230 * getClassNumber(day.order) }}\r\n                  ></div>\r\n                </div>\r\n              ))}\r\n            </div>\r\n            <div className=\"schedules\">\r\n              <div className=\"mon-to-thurs\">\r\n                {/* 1 */}\r\n                <div className=\"col\">\r\n                  <div\r\n                    className=\"time\"\r\n                    style={{ color: isDarkOrLightRGBAString(color.bg) === \"light\" ? \"#404040\" : \"#eee\" }}\r\n                  >\r\n                    07.50-08.30\r\n                  </div>\r\n                  {genSchedule(1)}\r\n                </div>\r\n                {/* 2 */}\r\n                <div className=\"col\">\r\n                  <div\r\n                    className=\"time\"\r\n                    style={{ color: isDarkOrLightRGBAString(color.bg) === \"light\" ? \"#404040\" : \"#eee\" }}\r\n                  >\r\n                    08.30-09.10\r\n                  </div>\r\n                  {genSchedule(2)}\r\n                </div>\r\n                {/* break10 */}\r\n                <div className=\"col\">\r\n                  <div style={{ backgroundColor: \"#fff\" }} className=\"break10-button\">\r\n                    <p className=\"text\" style={{ color: isDarkOrLightRGBAString(color.bg) === \"light\" ? \"#404040\" : \"#000\"}}>พัก</p>\r\n                    <p className=\"text\" style={{ color: isDarkOrLightRGBAString(color.bg) === \"light\" ? \"#404040\" : \"#000\"}}>10</p>\r\n                    <p className=\"text\" style={{ color: isDarkOrLightRGBAString(color.bg) === \"light\" ? \"#404040\" : \"#000\"}}>นาที</p>\r\n                  </div>\r\n                </div>\r\n                {/* 3 */}\r\n                <div className=\"col\">\r\n                  <div\r\n                    className=\"time\"\r\n                    style={{ color: isDarkOrLightRGBAString(color.bg) === \"light\" ? \"#404040\" : \"#eee\" }}\r\n                  >\r\n                    09.20-10.00\r\n                  </div>\r\n                  {genSchedule(3)}\r\n                </div>\r\n                {/* 4 */}\r\n                <div className=\"col\">\r\n                  <div\r\n                    className=\"time\"\r\n                    style={{ color: isDarkOrLightRGBAString(color.bg) === \"light\" ? \"#404040\" : \"#eee\" }}\r\n                  >\r\n                    10.00-10.40\r\n                  </div>\r\n                  {genSchedule(4)}\r\n                </div>\r\n                {/* 5 */}\r\n                <div className=\"col\">\r\n                  <div\r\n                    className=\"time\"\r\n                    style={{ color: isDarkOrLightRGBAString(color.bg) === \"light\" ? \"#404040\" : \"#eee\" }}\r\n                  >\r\n                    10.40-11.20\r\n                  </div>\r\n                  {genSchedule(5)}\r\n                </div>\r\n                {/* lunchbreak */}\r\n                <div className=\"col\">\r\n                  <div style={{ backgroundColor: \"#fff\" }} className=\"lunch-button\">\r\n                    <p className=\"text\" style={{ color: isDarkOrLightRGBAString(color.bg) === \"light\" ? \"#404040\" : \"#000\"}}>พัก</p>\r\n                    <p className=\"text\" style={{ color: isDarkOrLightRGBAString(color.bg) === \"light\" ? \"#404040\" : \"#000\"}}>กลาง</p>\r\n                    <p className=\"text\" style={{ color: isDarkOrLightRGBAString(color.bg) === \"light\" ? \"#404040\" : \"#000\"}}>วัน</p>\r\n                  </div>\r\n                </div>\r\n                {/* 6 */}\r\n                <div className=\"col\">\r\n                  <div\r\n                    className=\"time\"\r\n                    style={{ color: isDarkOrLightRGBAString(color.bg) === \"light\" ? \"#404040\" : \"#eee\" }}\r\n                  >\r\n                    12.20-13.00\r\n                  </div>\r\n                  {genSchedule(6)}\r\n                </div>\r\n                {/* 7 */}\r\n                <div className=\"col\">\r\n                  <div\r\n                    className=\"time\"\r\n                    style={{ color: isDarkOrLightRGBAString(color.bg) === \"light\" ? \"#404040\" : \"#eee\" }}\r\n                  >\r\n                    13.00-13.40\r\n                  </div>\r\n                  {genSchedule(7)}\r\n                </div>\r\n                {/* break10 */}\r\n                <div className=\"col\">\r\n                  <div style={{ backgroundColor: \"#fff\" }} className=\"break10-button\">\r\n                    <p className=\"text\" style={{ color: isDarkOrLightRGBAString(color.bg) === \"light\" ? \"#404040\" : \"#000\"}}>พัก</p>\r\n                    <p className=\"text\" style={{ color: isDarkOrLightRGBAString(color.bg) === \"light\" ? \"#404040\" : \"#000\"}}>10</p>\r\n                    <p className=\"text\" style={{ color: isDarkOrLightRGBAString(color.bg) === \"light\" ? \"#404040\" : \"#000\"}}>นาที</p>\r\n                  </div>\r\n                </div>\r\n                {/* 8 */}\r\n                <div className=\"col\">\r\n                  <div\r\n                    className=\"time\"\r\n                    style={{ color: isDarkOrLightRGBAString(color.bg) === \"light\" ? \"#404040\" : \"#eee\" }}\r\n                  >\r\n                    13.50-14.30\r\n                  </div>\r\n                  {genSchedule(8)}\r\n                </div>\r\n                <div className=\"col\">\r\n                  <div\r\n                    className=\"time\"\r\n                    style={{ color: isDarkOrLightRGBAString(color.bg) === \"light\" ? \"#404040\" : \"#eee\" }}\r\n                  >\r\n                    14.30-15.10\r\n                  </div>\r\n                  {genSchedule(9)}\r\n                </div>\r\n              </div>\r\n              <div className=\"fri\">\r\n                <div className=\"button\" style={{ backgroundColor: \"#fff\" }}>\r\n                  <div\r\n                    className=\"text\"\r\n                    style={{ color: isDarkOrLightRGBAString(color.bg) === \"light\" ? \"#000\" : \"#000\" }}\r\n                  >\r\n                    วิชารักษาดินแดน\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <Logo color={color.t1} />\r\n        </div>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Room\r\n","D:\\wtf\\schedule-generator\\src\\pages\\_app.tsx",[],"D:\\wtf\\schedule-generator\\src\\pages\\_document.tsx",["235"],"D:\\wtf\\schedule-generator\\src\\utils\\constants.ts",[],"D:\\wtf\\schedule-generator\\src\\utils\\document.ts",[],"D:\\wtf\\schedule-generator\\src\\utils\\getKeptFile.ts",[],"D:\\wtf\\schedule-generator\\src\\utils\\hexToRgb.ts",[],"D:\\wtf\\schedule-generator\\src\\utils\\isDarkOrLight.ts",[],"D:\\wtf\\schedule-generator\\src\\utils\\object.ts",[],"D:\\wtf\\schedule-generator\\src\\utils\\screenshot.ts",[],"D:\\wtf\\schedule-generator\\src\\vectors\\Socials.tsx",[],{"ruleId":"236","severity":1,"message":"237","line":9,"column":7,"nodeType":"238","endLine":9,"endColumn":74},{"ruleId":"236","severity":1,"message":"237","line":19,"column":7,"nodeType":"238","endLine":19,"endColumn":74},{"ruleId":"236","severity":1,"message":"237","line":9,"column":7,"nodeType":"238","endLine":9,"endColumn":89},{"ruleId":"236","severity":1,"message":"237","line":20,"column":7,"nodeType":"238","endLine":20,"endColumn":81},{"ruleId":"236","severity":1,"message":"237","line":7,"column":13,"nodeType":"238","endLine":7,"endColumn":76},{"ruleId":"236","severity":1,"message":"237","line":15,"column":13,"nodeType":"238","endLine":15,"endColumn":76},{"ruleId":"236","severity":1,"message":"237","line":9,"column":7,"nodeType":"238","endLine":9,"endColumn":82},{"ruleId":"236","severity":1,"message":"237","line":19,"column":7,"nodeType":"238","endLine":19,"endColumn":82},{"ruleId":"239","severity":1,"message":"240","line":40,"column":6,"nodeType":"241","endLine":40,"endColumn":20,"suggestions":"242"},{"ruleId":"236","severity":1,"message":"237","line":7,"column":7,"nodeType":"238","endLine":7,"endColumn":89},{"ruleId":"236","severity":1,"message":"237","line":15,"column":9,"nodeType":"238","endLine":15,"endColumn":79},{"ruleId":"236","severity":1,"message":"237","line":15,"column":9,"nodeType":"238","endLine":15,"endColumn":79},{"ruleId":"239","severity":1,"message":"243","line":69,"column":6,"nodeType":"241","endLine":69,"endColumn":13,"suggestions":"244"},{"ruleId":"239","severity":1,"message":"245","line":81,"column":6,"nodeType":"241","endLine":81,"endColumn":16,"suggestions":"246"},{"ruleId":"239","severity":1,"message":"247","line":86,"column":6,"nodeType":"241","endLine":86,"endColumn":14,"suggestions":"248"},{"ruleId":"236","severity":1,"message":"237","line":166,"column":13,"nodeType":"238","endLine":166,"endColumn":97},{"ruleId":"239","severity":1,"message":"249","line":52,"column":6,"nodeType":"241","endLine":52,"endColumn":8,"suggestions":"250"},{"ruleId":"239","severity":1,"message":"251","line":103,"column":6,"nodeType":"241","endLine":103,"endColumn":32,"suggestions":"252"},{"ruleId":"253","severity":1,"message":"254","line":23,"column":11,"nodeType":"238","endLine":23,"endColumn":88},"jsx-a11y/alt-text","Image elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'handleChange'. Either include it or remove the dependency array.","ArrayExpression",["255"],"React Hook useEffect has a missing dependency: 'getColorsFromID'. Either include it or remove the dependency array.",["256"],"React Hook useEffect has missing dependencies: 'background', 'customThemes', and 'theme'. Either include them or remove the dependency array.",["257"],"React Hook useEffect has missing dependencies: 'setBGcolor' and 'setPrimaryColor'. Either include them or remove the dependency array. If 'setBGcolor' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["258"],"React Hook useEffect has a missing dependency: 'CloseID'. Either include it or remove the dependency array.",["259"],"React Hook useEffect has a missing dependency: 'router.query.bg'. Either include it or remove the dependency array.",["260"],"@next/next/next-script-for-ga","Use the `next/script` component for loading third party scripts. See: https://nextjs.org/docs/messages/next-script-for-ga.",{"desc":"261","fix":"262"},{"desc":"263","fix":"264"},{"desc":"265","fix":"266"},{"desc":"267","fix":"268"},{"desc":"269","fix":"270"},{"desc":"271","fix":"272"},"Update the dependencies array to be: [defaultColor, handleChange]",{"range":"273","text":"274"},"Update the dependencies array to be: [getColorsFromID, theme]",{"range":"275","text":"276"},"Update the dependencies array to be: [background, customThemes, theme, userData]",{"range":"277","text":"278"},"Update the dependencies array to be: [colors, setBGcolor, setPrimaryColor]",{"range":"279","text":"280"},"Update the dependencies array to be: [CloseID]",{"range":"281","text":"282"},"Update the dependencies array to be: [router.query.bg, router.query.colorScheme]",{"range":"283","text":"284"},[918,932],"[defaultColor, handleChange]",[2933,2940],"[getColorsFromID, theme]",[3306,3316],"[background, customThemes, theme, userData]",[3442,3450],"[colors, setBGcolor, setPrimaryColor]",[1332,1334],"[CloseID]",[2884,2910],"[router.query.bg, router.query.colorScheme]"]